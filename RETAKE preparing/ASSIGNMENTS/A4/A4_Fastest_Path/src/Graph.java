import java.util.ArrayList;import java.util.Comparator;import java.util.HashMap;import java.util.PriorityQueue;/** * Created by Petr on 18.04.2017. */public class Graph {    HashMap<String, Vertex> map;    ArrayList<Edge> edges;    ArrayList<Vertex> vertices;    public Graph() {        map = new HashMap<>();        edges = new ArrayList<>();        vertices = new ArrayList<>();    }    /**     * This method adds new edge to the edge list.     * @param v - name of vertex     * @param w - name of the another vertex     * @param dist - distance     * @param time - time     * @param cost - cost     */    public void addEdge(String v, String w, double dist, double time, double cost) {        if (map.containsKey(v) && map.containsKey(v) && !areAdjacent(v,w)) {            Vertex v1 = map.get(v);            Vertex v2 = map.get(w);            Edge edge = new Edge(v1, v2, dist, time, cost);            edges.add(edge);            v1.incidentEdges.add(edge);            v2.incidentEdges.add(edge);            v2.adjacencyVertex.add(v1);            v1.adjacencyVertex.add(v2);        }    }    /**     * This method adds new vertex to the vertex list.     * @param name - name of the new vertex.     */    public void addVertex(String name) {        if (!map.containsKey(name)) {            Vertex vertex = new Vertex(name);            map.put(name, vertex);            vertices.add(vertex);        }    }    /**     * This method returns the array of two vertices which form an edge.     * @param e Edge     * @return ArrayList of vertices     */    public ArrayList<Vertex> endVertices(Edge e){        return e.endVertices;    }    /**     * This method returns if two vertices are adjacent     * @param v vertex     * @param w vertex     * @return true/false     */    public boolean areAdjacent(Vertex v, Vertex w){        return v.adjacencyVertex.contains(w);    }    /**     * This method returns if two vertices are adjacent     * @param name1 - name of the first vertex     * @param name2 - name of the second vertex     * @return true/false     */    public boolean areAdjacent(String name1, String name2){        Vertex v = map.get(name1);        Vertex w = map.get(name2);        return v.adjacencyVertex.contains(w);    }    /**     * This method returns degree of the vertex     * @param v - given vertex     * @return degree     */    public int degree(Vertex v){        return v.incidentEdges.size();    }    /**     * This method returns degree of the vertex     * @param name  - name of the given vertex     * @return degree     */    public int degree(String name){        Vertex v = map.get(name);        return v.incidentEdges.size();    }    /**     * This method removes Vertex from the graph, also removes this vertex form every "adjacencyVertex" list.     * @param v - given vertex     */    public void removeVertex(Vertex v){        for (Edge e : v.incidentEdges) {            e.opposite(v).adjacencyVertex.remove(v);            e.opposite(v).incidentEdges.remove(e);            edges.remove(e);        }        vertices.remove(v);        map.remove(v.getName());    }    /**     * This method removes Vertex from the graph, also removes this vertex form every "adjacencyVertex" list.     * @param name - name of the given vertex     */    public void removeVertex(String name){        Vertex v = map.get(name);        map.remove(name);        for (Edge e : v.incidentEdges) {            e.opposite(v).adjacencyVertex.remove(v);            e.opposite(v).incidentEdges.remove(e);            edges.remove(e);        }        vertices.remove(v);    }    /**     * This method removes Edge from the graph, also removes this edge from every "incidentEdge" lists     * @param e - given edge     */    public void removeEdge(Edge e){        for (Vertex v : e.endVertices) {            v.incidentEdges.remove(e);            v.adjacencyVertex.remove(e.opposite(v));        }        edges.remove(e);    }}